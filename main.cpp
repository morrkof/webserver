#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/select.h>
#include <string.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <iostream>
#include "requestParsing.hpp"
#include "config/ConfigurationFile.hpp"
#include "response.hpp"
#include "Websocket.hpp"
#include <list>
#include <vector>
#include <set>
#include <algorithm>
#include <errno.h>

#define PORT 8000 // —ç—Ç–æ –∂–¥—ë–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

ConfigurationFile*	getConfig(std::string	fileName)
{
	ConfigurationFile	*configParser = new ConfigurationFile();

	std::cout << "Start parse config" << std::endl;
	configParser->parseFile(fileName);
	std::cout << "Finish parse config" << std::endl;
	std::vector<ConfigurationServer> *servers = configParser->getServers();
	std::cout << "Got servers: " << servers->size() << std::endl;
	for (unsigned long i = 0; i < servers->size(); i++)
	{
		std::cout << servers->at(i);
	}

	return configParser;
}

/* —Å–æ–∑–¥–∞—ë–º —Å–ª—É—à–∞—é—â–∏–µ —Å–æ–∫–µ—Ç—ã –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ */
int	socket_init(int port)
{
	int listen_socket;
	int on = 1;

	/* –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–≥–æ –≤ listen_socket */
	if (!(listen_socket = socket(PF_INET, SOCK_STREAM, 0)))
	{
		std::cout << "socket() failed\n";
		exit(-1);
	}
	/* –¥–µ–ª–∞–µ–º –Ω–∞—à —Å–æ–∫–µ—Ç —Ä–µ—é–∑–∞–±–µ–ª—å–Ω—ã–º, –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞ */
	int rc = setsockopt(listen_socket, SOL_SOCKET,  SO_REUSEADDR, (char *)&on, sizeof(on));
	if (rc < 0)
	{
		std::cout << "setsockopt() failed\n";
		close(listen_socket);
		exit(-1);
	}
	/* –¥–µ–ª–∞–µ–º –Ω–∞—à —Å–æ–∫–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º, —á—Ç–æ–± –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –≤–∏—Å —Ç—É—Ç, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç */
	fcntl(listen_socket, F_SETFL, O_NONBLOCK);
	/* –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ—Ä—Ç–∞ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ –ø–æ—Ä—Ç—É */
	struct sockaddr_in addr;
	addr.sin_family = PF_INET;
	addr.sin_port = htons(port);
	addr.sin_addr.s_addr = htonl(INADDR_ANY);
	if (bind(listen_socket, (sockaddr *) &addr, sizeof(addr)) == -1)
	{
		std::cout << "bind() failed\n";
		close(listen_socket);
		exit(-1);
	}
	/* –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à —Å–æ–∫–µ—Ç –≤ —Å–ª—É—à–∞—é—â–∏–π —Ä–µ–∂–∏–º, –æ–Ω –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */
	if (listen(listen_socket, 128) == -1)
	{
		std::cout << "listen() failed\n";
		close(listen_socket);
		exit(-1);
	}
	return listen_socket;
}

int main(int argc, char **argv, char **env)
{
	ConfigurationFile *config;

	/* –ü–æ—à–µ–ª —Å—é–¥–∞ –∫–æ–Ω—Ñ–∏–≥ */
	if (argc == 1)
		config = getConfig("basic_static.conf");
	else
	{
		std::string filename(argv[1]);
		config = getConfig(filename);
	}

	std::cout << "Got config in main. Servers: " << config->getServers()->size() << std::endl;

	/* –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç—ã –∏ —Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ —Å–ª—É—à–∞—é—â–∏—Ö —Å–æ–∫–µ—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö  */
	std::list<Websocket *> sockets;
	Websocket *s;
	for (std::vector<ConfigurationServer>::iterator it = config->getServers()->begin(); it != config->getServers()->end(); ++it)
	{
		ConfigurationServer *temp = &(*it);
		std::vector<t_listen> ports = temp->getListenVec();
		for (std::vector<t_listen>::iterator it2 = ports.begin(); it2 != ports.end(); it2++)
		{
			s = new Websocket(socket_init((*it2).port), LISTEN, temp, env);
			sockets.push_back(s);
		}
	}
	
	
	std::cout << "ü¶Ñ Waiting for connect\n";

	/* –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞ */
	fd_set fd_read, fd_write;
	int ready_events;
	while (1)
	{
		/* —É–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –Ω–∞ –ø—Ä–æ—à–ª–æ–º –ø—Ä–æ—Ö–æ–¥–µ —Å–æ–∫–µ—Ç—ã –∏ –æ—á–∏—â–∞–µ–º –Ω–∞–±–æ—Ä—ã —Ç–µ—Ö, –≥–¥–µ –ª–æ–≤–∏–º —Å–æ–±—ã—Ç–∏—è */
		sockets.remove(NULL);
		FD_ZERO(&fd_read);
		FD_ZERO(&fd_write);
		/* –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–æ–∫–µ—Ç–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –Ω–∞–±–æ—Ä—ã –¥–ª—è –ª–æ–≤–ª–∏ —Å–æ–±—ã—Ç–∏–π */
		for (std::list<Websocket *>::iterator it = sockets.begin(); it != sockets.end(); ++it)
		{
			if ((*it)->getType() == WRITE)
				FD_SET((*it)->getSocket(), &fd_write);
			else
				FD_SET((*it)->getSocket(), &fd_read);
		}
		/* —Å–æ—Ä—Ç–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–µ–ª–µ–∫—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π + 1 */
		sockets.sort(compare_ws);
		/* –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ, —Å–µ–ª–µ–∫—Ç. –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π */
		ready_events = select((*(sockets.rbegin()))->getSocket() + 1, &fd_read, &fd_write, NULL, NULL);
		/* –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª < 0 = –æ—à–∏–±–∫–∞, –≤—Å—ë –∑–∞—á–∏—â–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º */
		if (ready_events < 0)
		{
			int err = errno;
			std::cout << "select() failed. Error " << err << " " << strerror(err) << std::endl;
			for (std::list<Websocket *>::iterator it = sockets.begin(); it != sockets.end(); ++it)
				delete (*it);
			sockets.clear();
			exit(-1);
		}
		/* –≤–µ—Ä–Ω—É–ª 0 - —Ç–∞–π–º–∞—É—Ç, –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ –≤—Ç–æ—Ä–æ–º—É –∫—Ä—É–≥—É */
		else if (ready_events == 0)
		{
			std::cout << "select() timeout\n";
			continue;
		}
		/* –≤–µ—Ä–Ω—É–ª > 0 = –∏–¥—ë–º —Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –∑–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–º –ø–æ–π–º–∞–ª–∏—Å—å */
		else
		{
			/* –∑–∞–≤–æ–¥–∏–º —Å—á—ë—Ç—á–∏–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ —Å–æ–∫–µ—Ç—ã */
			int done = 0;
			for (std::list<Websocket *>::iterator it = sockets.begin(); it != sockets.end() && done < ready_events; ++it)
			{
				/* –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–æ–∫–µ—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ */
				if (FD_ISSET((*it)->getSocket(), &fd_read))
				{
					/* –µ—Å–ª–∏ —ç—Ç–æ —Å–ª—É—à–∞—é—â–∏–π —Å–æ–∫–µ—Ç, —Ç–æ "—Å—á–∏—Ç—ã–≤–∞—Ç—å" –±—É–¥–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ */
					if ((*it)->getType() == LISTEN)
					{
						/* –≥–æ—Ç–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ —Å –ø–æ–º–µ—Ç–∫–æ–π READ */
						sockaddr_storage client_addr;
						unsigned int address_size = sizeof(client_addr);
						int conn = accept((*it)->getSocket(), (sockaddr *) &client_addr, &address_size);
						fcntl(conn, F_SETFL, O_NONBLOCK);
						Websocket *s = new Websocket(conn, READ, (*it)->getServer(), env);
						sockets.push_back(s);
					}
					/* –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Ç–æ —á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ –ø–æ–º–µ—Ç–∫–∞ READ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤–æ WRITE */
					else
					{
						int len = 20000; // TODO –±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
						char buf[len];
						memset(buf, 0, len);
						recv((*it)->getSocket(), buf, len, 0);
						(*it)->setRequest(buf);
						// std::cout << buf << std::endl; /* —Ç—É—Ç –ø–µ—á–∞—Ç—å —Ä–µ–∫–≤–µ—Å—Ç–∞ –î–û –ø–∞—Ä—Å–∏–Ω–≥–∞ */
						// std::cout << (*it)->getRequest(); /* —Ç—É—Ç –ø–µ—á–∞—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏—à–µ–¥—à–µ–≥–æ —Ä–µ–∫–≤–µ—Å—Ç–∞ */
						// std::cout << (*it)->getResponse(); /* —Ç—É—Ç –ø–µ—á–∞—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ */
					}
					/* —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–æ–∫–µ—Ç –∏–∑ —Å–µ–ª–µ–∫—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ */
					FD_CLR((*it)->getSocket(),&fd_read);
					++done;
				}
				/* –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–æ–∫–µ—Ç –Ω–∞ –∑–∞–ø–∏—Å—å */
				else if (FD_ISSET((*it)->getSocket(), &fd_write))
				{
					/* –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–æ–∫–µ—Ç */
					send((*it)->getSocket(), ((*it)->getResponseChars()).c_str(), (*it)->getResponseLen(), 0);
					FD_CLR((*it)->getSocket(),&fd_write);
					++done;
					delete (*it);
					*it = NULL;
				}
			}
		}
	}
	return 0;
}
